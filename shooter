package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
@TeleOp (name = "TELEOP_BESTB (Blocks to Java)")
public class TELEOP_BESTB extends LinearOpMode {
  public double desiredspeed=0;//desired ticks per sec
  private DcMotor backleft;
  private DcMotor backright;
  private DcMotor frontright;
  private DcMotor frontleft;
  private DcMotor shooterA;
  private DcMotor shooterB;
  public class PIDCONTOLLERshooterB{
    


    public double kpshooterB; 
    public double kishooterB; 
    public double kdshooterB;
    
    double previousErrorshooterB=0;
    double intergralshooterB=0; //assign a value in the future to intergral
    double minOutputshooterB=0; //assign a value in the future to minoutput
    double maxOutputshooterB=0; //assign a value in the future to maxoutput
    public class PIDCONTOLLERshooterB{
     public double PIDshooterB(double kpshooterB, double kishooterB, double kdshooterB, double shooterB1, double shooterB2, double shooterB3){
       
       this.kpshooterB=kpshooterB;
       this.kishooterB=kishooterB;
       this.kdshooterB=kdshooterB;
       double outputshooterBa = kpshooterB * shooterB1 + kishooterB * shooterB3 + kdshooterB * shooterB2;
       return outputshooterBa;
     }
     public double calcshooterB(double targetshooterB,double currentshooterB){
        double errorshooterB = targetshooterB - currentshooterB;
        double integralshooterB =+ errorshooterB;
        double derivativeshooterB = errorshooterB - previousErrorshooterB;
        double outputshooterBa = PIDshooterB(kpshooterB, kishooterB, kdshooterB, errorshooterB, derivativeshooterB, integralshooterB);
        double outputshooterB = Math.max(minOutputshooterB, Math.min(maxOutputshooterB, outputshooterBa));

        double previousErrorshooterB = errorshooterB;
        return outputshooterB;
    }
    public void resetshooterB(){
       double previousErrorshooterB=0;
       double intergralshooterB=0;
    }
  }
  public class PIDCONTOLLERshooterA{
    


    public double kpshooterA; 
    public double kishooterA; 
    public double kdshooterA;
    
    double previousErrorshooterA=0;
    double intergralshooterA=0; //assign a value in the future to intergral
    double minOutputshooterA=0; //assign a value in the future to minoutput
    double maxOutputshooterA=0; //assign a value in the future to maxoutput
    public class PIDCONTOLLERshooterA{
     public double PIDshooterA(double kpshooterA, double kishooterA, double kdshooterA, double shooterA1, double shooterA2, double shooterA3){
       
       this.kpshooterA=kpshooterA;
       this.kishooterA=kishooterA;
       this.kdshooterA=kdshooterA;
       double outputshooterAa = kpshooterA * shooterA1 + kishooterA * shooterA3 + kdshooterA * shooterA2;
       return outputshooterAa;
     }
     public double calcshooterA(double targetshooterA,double currentshooterA){
        double errorshooterA = targetshooterA - currentshooterA;
        double integralshooterA =+ errorshooterA;
        double derivativeshooterA = errorshooterA - previousErrorshooterA;
        double outputshooterAa = PIDshooterA(kpshooterA, kishooterA, kdshooterA, errorshooterA, derivativeshooterA, integralshooterA);
        double outputshooterA = Math.max(minOutputshooterA, Math.min(maxOutputshooterA, outputshooterAa));

        double previousErrorshooterA = errorshooterA;
        return outputshooterA;
    }    
    public void resetshooterA(){
       double previousErrorshooterA=0;
       double intergralshooterA=0;
    }
  }
  @Override
  public void runOpMode() {
    double yAxis= -gamepad2.left_stick_y;
    double xAxis= gamepad2.left_stick_x;
    double zAxis= gamepad1.right_stick_y;
    double x=0;
    double y=0;
    double turn=0;
    double backleft_A;
    double backright_A;
    double frontleft_A;
    double frontright_A;

    shooterA = hardwareMap.get(DcMotor.class, "shooterA");
    shooterB = hardwareMap.get(DcMotor.class, "shooterB");
    backleft = hardwareMap.get(DcMotor.class, "backleft");
    backright = hardwareMap.get(DcMotor.class, "backright");
    frontright = hardwareMap.get(DcMotor.class, "frontright");
    frontleft = hardwareMap.get(DcMotor.class, "frontleft");
    waitForStart();
  while (opModeIsActive()) {
        
        y = gamepad2.left_stick_y;
        x = gamepad2.left_stick_x;
        turn = gamepad2.right_stick_x;
        
        frontleft_A = y - x - turn;
        frontright_A = (y + x) + turn;
        backleft_A = (y + x) - turn;
        backright_A = (y - x) + turn;

        
       

        
        if (gamepad2.right_bumper) {
          double precision=1-gamepad2.left_trigger;               
          frontleft_A=precision*(frontleft_A);
          frontright_A=precision*(frontright_A);
          backleft_A=precision*(backleft_A);
          backright_A=precision*(backright_A);
        }

        if (gamepad2.left_bumper) {
          double precision=0.3-(gamepad2.left_trigger*0.3);                 
          frontleft_A=precision*(frontleft_A);
          frontright_A=precision*(frontright_A);
          backleft_A=precision*(backleft_A);
          backright_A=precision*(backright_A);
        }
        if(!gamepad2.left_bumper && !gamepad2.right_bumper){
          double precision=0.6-(gamepad2.left_trigger*0.6);                  
                                                     
          frontleft_A=precision*(frontleft_A);
          frontright_A=precision*(frontright_A);
          backleft_A=precision*(backleft_A);
          backright_A=precision*(backright_A);
        }
                 

        if(gamepad2.a){
              frontright.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
              frontleft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
              backleft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
              backright.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE); 
            }
        else if(gamepad2.b){
              frontright.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT);    
              frontleft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT); 
              backleft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT);     
              backright.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT);
            }
        else{
              frontright.setPower(-frontright_A);        
              frontleft.setPower(-frontleft_A);          
              backleft.setPower(backleft_A);            
              backright.setPower(backright_A);
            }
        }
    }
}
