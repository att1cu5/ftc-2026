package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
@TeleOp (name = "TELEOP_BESTA (Blocks to Java)")
public class TELEOP_BESTA extends LinearOpMode {

  private DcMotor backleft;
  private DcMotor backright;
  private DcMotor frontright;
  private DcMotor frontleft;
  private DcMotor intake;
  @Override
  public void runOpMode() {
    double speedOfintakeOff=0;
    double speedOfintakeOn=0.5;
    double yAxis= -gamepad2.left_stick_y;
    double xAxis= gamepad2.left_stick_x;
    double zAxis= gamepad1.right_stick_y;
    double x=0;
    double y=0;
    double turn=0;
    double backleft_A;
    double backright_A;
    double frontleft_A;
    double frontright_A;
    intake = hardwareMap.get(DcMotor.class, "intake");
    backleft = hardwareMap.get(DcMotor.class, "backleft");
    backright = hardwareMap.get(DcMotor.class, "backright");
    frontright = hardwareMap.get(DcMotor.class, "frontright");
    frontleft = hardwareMap.get(DcMotor.class, "frontleft");
    waitForStart();
  while (opModeIsActive()) {
        
        y = gamepad2.left_stick_y;
        x = gamepad2.left_stick_x;
        turn = gamepad2.right_stick_x;
        
        frontleft_A = y - x - turn;
        frontright_A = (y + x) + turn;
        backleft_A = (y + x) - turn;
        backright_A = (y - x) + turn;

        if(gamepad1.a){
           intake.setPower(speedOfintakeOn);   
        }
        if(gamepad1.b){
        
          intake.setPower(speedOfintakeOff); 

        }
        if (gamepad2.right_bumper) {
          double precision=1-gamepad2.left_trigger;               
          frontleft_A=precision*(frontleft_A);
          frontright_A=precision*(frontright_A);
          backleft_A=precision*(backleft_A);
          backright_A=precision*(backright_A);
        }

        if (gamepad2.left_bumper) {
          double precision=0.3-(gamepad2.left_trigger*0.3);                 
          frontleft_A=precision*(frontleft_A);
          frontright_A=precision*(frontright_A);
          backleft_A=precision*(backleft_A);
          backright_A=precision*(backright_A);
        }
        if(!gamepad2.left_bumper && !gamepad2.right_bumper){
          double precision=0.6-(gamepad2.left_trigger*0.6);                  
                                                     
          frontleft_A=precision*(frontleft_A);
          frontright_A=precision*(frontright_A);
          backleft_A=precision*(backleft_A);
          backright_A=precision*(backright_A);
        }
                 

        if(gamepad2.a){
              frontright.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
              frontleft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
              backleft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
              backright.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE); 
            }
        else if(gamepad2.b){
              frontright.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT);    
              frontleft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT); 
              backleft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT);     
              backright.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT);
            }
        else{
              frontright.setPower(-frontright_A);        
              frontleft.setPower(-frontleft_A);          
              backleft.setPower(backleft_A);            
              backright.setPower(backright_A);
            }
        }
    }
}
